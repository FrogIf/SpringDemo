# 不做端口配置时, 默认使用8080端口
server:
  port: 8080
  error:
    include-exception: true # 开发环境开启, 用于前台输出错误日志
    include-stacktrace: always # 开发环境开启, 用于前台输出错误日志
  max-http-header-size: 20480

spring:
  datasource:
    initialization-mode: always # 使用脚本进行初始化
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://127.0.0.1/springbucks?useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=CONVERT_TO_NULL
    username: springbucks
    password: springbucks
#    url: jdbc:h2:mem:testdb
#    username: sa
#    password: sa
#    password: n/z7PyA5cvcXvs8px8FVmBVpaRyNsvJb3X7YfS38DJrIg25EbZaZGvH4aHcnc97Om0islpCAPc3MqsGvsrxVJw==
    druid:
      initial-size: 5
      max-active: 5
      min-idle: 5
      filters: conn, config, stat, slf4j
#      connection-properties: config.decrypt=true;config.decrypt.key=${public-key}  # druid密码加密
      filter:
        config:
          enabled: true
      test-on-borrow: false
      test-while-idle: true
      test-on-return: false
      validation-query: SELECT 1
#    hikari:
#      maximum-pool-size: 5
#      minimum-idle: 5
#      idle-timeout: 600000
#      connection-timeout: 30000
#      max-lifetime: 1800000
  output:
    ansi:
      enabled: always
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  data:
    mongodb:
      uri: mongodb://springbucks:springbucks@127.0.0.1:27017/springbucks
  cache:
    type: redis
    cache-names: coffee
    redis:
      time-to-live: 5000
      cache-null-values: false
  redis:
    host: 127.0.0.1
    port: 6379
    lettuce:
      pool:
        max-active: 5
        max-idle: 5
  thymeleaf:
    cache: false  # 开发环境, 不使用thymeleaf缓存
  mvc:
    static-path-pattern: /static/**
  resources:
    cache:
      cachecontrol:
        max-age: 20s
        # no-cache: true
  session:
    store-type: redis
  security:
    user:
      name: frog
      password: 123456
#  boot:
#    admin:
#      client:
#        url: http://localhost:8081
#        username: frog
#        password: 123456
#        instance:
#          metadata:
#            user:
#              name: ${spring.security.user.name}
#              password: ${spring.security.user.password}
  cloud:
#    zookeeper:   # zookeeper注册中心
#      connect-string: 127.0.0.1:2181
    consul:   # consul注册中心
      host: 127.0.0.1
      port: 8500
      discovery:
        prefer-ip-address: true
#    nacos:  #nacos 注册中心
#      discovery:
#        server-addr: 127.0.0.1:8848
    stream:
      bindings:
        finishedOrders:
          group: frog-coffee
      rabbit:
        bindings:
          notifyOrders:
            producer:
              routing-key-expression: headers.starter
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: spring
    password: spring

# Spring boot actuator端点启用和暴露
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

# http://localhost:8080/actuator/info访问展示的信息
info:
  app:
    author: frog
    version : ${java.version}
    encoding : ${project.build.sourceEncoding}
  demo:
    name: "Spring Boot Admin Client Demo"

# 数据库加密秘钥
# public-key: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALS8ng1XvgHrdOgm4pxrnUdt3sXtu/E8My9KzX8sXlz+mXRZQCop7NVQLne25pXHtZoDYuMh3bzoGj6v5HvvAQ8CAwEAAQ==


# mybatis
mybatis:
  type-handlers-package: sch.frog.learn.spring.mybatis.common.typehandler
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  type-aliases-package: sch.frog.learn.spring.**.model
  mapper-locations: classpath*:/mapper/**/*.xml
pagehelper:
  page-size-zero: true  #如果pageSize传入的是0, 则查询全部
  offset-as-page-num: true # 指示pageNum参数表示的页码, 而不是记录的offset
  reasonable: true  # 如果pageNum小于0时自动处理
  support-methods-arguments: true # 方法参数支持


redis:
  host: 127.0.0.1
  maxTotal: 5
  maxIdle: 5
  testOnBorrow : true

logging:
  level:
    org:
      springframework:
        data:
          r2dbc: DEBUG

frog:
  model:
    value: 12
    child-model:
      name: frog
  discovery:
    enable: true
  order:
    discount: 10

resilience4j:
  ratelimiter:
    limiters:
      coffee:
        limit-for-period: 5 # 每一个时间窗口下只允许5个请求
        limit-refresh-period-in-millis: 30000 # 时间窗口大小ms
        timeout-in-millis: 5000
        subscribe-for-events: true
        register-health-indicator: true
      order:
        limit-for-period: 100 # 每一个时间窗口下只允许100个请求
        limit-refresh-period-in-millis: 30000 # 时间窗口大小ms
        timeout-in-millis: 5000
        subscribe-for-events: true
        register-health-indicator: true
